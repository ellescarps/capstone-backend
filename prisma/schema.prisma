// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  profilePicUrl String
  isAdmin Boolean @default(false)
  location Location @relation(fields: [locationId], references: [id])
  locationId Int

  shippingOption ShippingOption?
  shippingResponsibility  ShippingResponsibility 

  posts Post[]
  comments Comment[]
  collections Collection[]
  messageSent Message[] @relation("SentMessages")  
  messageReceived Message[] @relation("ReceivedMessages")
  likes Like[]
  follows Follow[] @relation("Following")
  followers Follow[] @relation("Followers")
  favorites Favorite[]

}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String
  isAvailable Boolean @default(true)

  shippingCost Float
  shippingResponsibility ShippingResponsibility// "receiver", "giver", "shared"
  shippingOption ShippingOption

  isFeatured Boolean @default(false)
  trendingScore Int @default(0)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references:  [id])
  userId Int

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  location Location @relation(fields:[locationId], references: [id])
  locationId Int

  images Image[]
  media Media[]
  likes Like[]
  favorites Favorite[]
  comments Comment[]

  collections Collection[] @relation("PostCollections")
}

model Message {
  id Int @id @default(autoincrement())
  content String
  timestamp DateTime @default(now())

  sender User @relation("SentMessages", fields: [senderId], references: [id])
  senderId Int
  
  receiver User @relation("ReceivedMessages", fields: [receiverId], references:[id])
  receiverId Int 
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  posts Post[]
}

model Image {
  id Int @id @default(autoincrement())
  url String
  post Post @relation(fields: [postId], references: [id])
  postId Int
}

model Media {
  id Int @id @default(autoincrement())
  type String // "video, audio, etc"
  url String
  post Post @relation(fields: [postId], references: [id])
  postId Int
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  code   String  // Optional: for ISO or custom codes
  locations Location[]
}

model Location {
  id Int @id @default(autoincrement())
  city String
  country Country @relation(fields: [countryId], references: [id])
  countryId Int
  latitude Float
  longitude Float

  users User[]
  posts Post[]
}

model Favorite {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  post Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  userId Int

  post Post @relation(fields: [postId], references: [id])
  postId Int

  
}

model Like {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  post Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Follow {
  id         Int  @id @default(autoincrement())
  follower   User @relation("Followers", fields: [followerId], references: [id])
  followerId Int
  following  User @relation("Following", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId])
}


model Collection {
  id Int @id @default(autoincrement())
  name String
  user User @relation(fields: [userId], references: [id])
  userId Int
  posts Post[] @relation("PostCollections")
  }

enum ShippingResponsibility {
  GIVER
  RECEIVER
  SHARED
}

enum ShippingOption {
  PICKUP
  SHIPPING
  BOTH
}
